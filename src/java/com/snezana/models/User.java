package com.snezana.models;
// Generated Aug 24, 2016 5:53:20 PM by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "dbvideo_club"
)
public class User implements java.io.Serializable {

    private Integer id;
    /** First name */
    private String first;
    /** Last name */
    private String last;
    private Long idNum;
    private String phone;
    private String username;
    private String password;
    private Integer rentedFilms = 0;
    private Set<Role> roles = new HashSet<Role>(0);
    private Set<Film> films = new HashSet<Film>(0);

    public User() {
    }

    public User(String first, String last, Long idNum, String phone, String username, String password) {
        this.first = first;
        this.last = last;
        this.idNum = idNum;
        this.phone = phone;
        this.username = username;
        this.password = password;
    }

    public User(String first, String last, Long idNum, String phone, String username, String password, Integer numRented, Long ukTiznk, Set<Role> roles, Set<Film> films) {
        this.first = first;
        this.last = last;
        this.idNum = idNum;
        this.phone = phone;
        this.username = username;
        this.password = password;
        this.rentedFilms = numRented;
        this.roles = roles;
        this.films = films;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "first_name", length = 45)
    public String getFirst() {
        return this.first;
    }

    public void setFirst(String first) {
        this.first = first;
    }

    @Column(name = "last_name", length = 45)
    public String getLast() {
        return this.last;
    }

    public void setLast(String last) {
        this.last = last;
    }

    @Column(name = "jmbg")
    public Long getIdNum() {
        return this.idNum;
    }

    public void setIdNum(Long idNum) {
        this.idNum = idNum;
    }

    @Column(name = "telephone", length = 45)
    public String getPhone() {
        return this.phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    @Column(name = "username", length = 45)
    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Column(name = "password", length = 45)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "n_rentperuser")
    public Integer getRentedFilms() {
        return this.rentedFilms;
    }

    public void setRentedFilms(Integer rentedFilms) {
        this.rentedFilms = rentedFilms;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "user_role", catalog = "dbvideo_club", joinColumns = {
        @JoinColumn(name = "usr_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "rol_id", nullable = false, updatable = false)})
    public Set<Role> getRoles() {
        return this.roles;
    }

    public void setRoles(Set<Role> roles) {
        this.roles = roles;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "user_film", catalog = "dbvideo_club", joinColumns = {
        @JoinColumn(name = "user_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "film_id", nullable = false, updatable = false)})
    public Set<Film> getFilms() {
        return this.films;
    }

    public void setFilms(Set<Film> films) {
        this.films = films;
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 37 * hash + Objects.hashCode(this.id);
        hash = 37 * hash + Objects.hashCode(this.first);
        hash = 37 * hash + Objects.hashCode(this.last);
        hash = 37 * hash + Objects.hashCode(this.idNum);
        hash = 37 * hash + Objects.hashCode(this.phone);
        hash = 37 * hash + Objects.hashCode(this.username);
        hash = 37 * hash + Objects.hashCode(this.password);
        hash = 37 * hash + Objects.hashCode(this.rentedFilms);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final User other = (User) obj;
        if (!Objects.equals(this.first, other.first)) {
            return false;
        }
        if (!Objects.equals(this.last, other.last)) {
            return false;
        }
        if (!Objects.equals(this.phone, other.phone)) {
            return false;
        }
        if (!Objects.equals(this.username, other.username)) {
            return false;
        }
        if (!Objects.equals(this.password, other.password)) {
            return false;
        }
        if (!Objects.equals(this.id, other.id)) {
            return false;
        }
        if (!Objects.equals(this.idNum, other.idNum)) {
            return false;
        }
        if (!Objects.equals(this.rentedFilms, other.rentedFilms)) {
            return false;
        }
        if (!Objects.equals(this.roles, other.roles)) {
            return false;
        }
        if (!Objects.equals(this.films, other.films)) {
            return false;
        }
        return true;
    }

}
